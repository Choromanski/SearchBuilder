<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-iso8601" table-class="display nowrap" order="1">

<css lib="datatables searchbuilder"/>

<js lib="jquery datatables searchbuilder">
<![CDATA[

$(document).ready(function() {
    $.fn.dataTable.ext.searchBuilder.conditions.special = [{
        isInputValid(val, that) {
            if($(val[0]).attr('active') === "false"){
                $(val[0]).attr('active', true);
                return true;
            }
            else {
                $(val[0]).attr('active', false);
                return false;
            }
        },
        conditionName: 'Edinburgh',
        inputValue(val, that) {
            return ['Edinburgh']
        },
        init(that, fn, preDefined) {
            var el = $('<button>Edinburgh</button>').attr('active', false);

            return el.on('click', function() {fn(that, el)});
        },
        search( value, comparison) {
            return value === comparison[0];
        }
    }]

    var dt = $('#example').DataTable( {
        dom: 'Qfrtip',
        columnDefs: [{type: "special", targets: 2}]
    });

});

]]>
</js>

<title lib="searchBuilder">Plug in example</title>

<info><![CDATA[

This example shows how to use a plugin for a custom column type. The `$.fn.dataTable.ext.searchBuilder.conditions` object allows for custom conditions to be added to SearchBuilder. Details on the structure of the conditions to be added can be found at `-init searchBuilder.conditions[type]`.

Here the office column has been given a custom column type of `special`. We are also adding some conditions for a `special` type to SearchBuilder. To use the custom filter from the plugin select Office > Edinburgh and press the `Edinburgh` button that is displayed to toggle whether rows with `Edinburgh` are displayed.

]]></info>

</dt-example>
