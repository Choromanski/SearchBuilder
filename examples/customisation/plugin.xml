<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-iso8601" table-class="display nowrap" order="1">

<css lib="datatables searchbuilder"/>
<css lib="//cdn.jsdelivr.net/npm/select2@4.0.13/dist/css/select2.min.css"/>

<js lib="jquery"/> 
<js lib="//cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.js"/>
<js lib="datatables searchbuilder">
<![CDATA[

$(document).ready(function() {
    $.fn.dataTable.ext.searchBuilder.conditions.special = {
        "=": {
            isInputValid: function (el, that) {
                let allFilled = true;
                if (
                    $(el[0]).has('option:selected').length < 1 ||
                    (
                        $(el[0]).has('option:selected').length === 1 &&
                        $($(el[0]).children('option:selected')[0]).text().length === 0
                    )
                ) {
                    allFilled = false;
                }

                return allFilled;
            },
            conditionName: 'Equals',
            inputValue: function (el, value = null) {
                let values = [];

                if (value === null) {
                    for (let element of el) {
                        if ($(element).is('select')) {
                            values.push($(element).children('option:selected').val());
                        }
                    }
                }
                else {
                    for (let v = 0; v < el.length; v ++) {
                        if ($(el[v]).is('select')) {
                            let children = $(el[v]).children().toArray;
                            for (let child of children) {
                                if ($(child).val() === value[v]) {
                                    $(child).attr('selected', true);
                                    values.push(value[v]);
                                }
                            }
                        }
                    }
                }

                return values;
            },
            init: function (that, fn, preDefined = null) {
                let column = $(that.dom.data).children('option:selected').val();
                let indexArray = that.s.dt.rows().indexes().toArray();
                let settings = that.s.dt.settings()[0];
                let added = [];
                let el = $('<select id="select2" class="js-example-basic-single" style="width: 300px"/>');
                
                el.on('select2:select', function() { fn(that, el); });
                
                that.s.values = [];

                for (let index of indexArray) {
                    let filter = settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.search);

                    let value = {
                        filter,
                        index,
                        text: settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.conditionName)
                    };

                    that.s.values.push(value);

                    let opt = $('<option>', {
                        text : that.s.type.includes('html') ? value.text.replace(/(<([^>]+)>)/ig, '') : value.text,
                        value : that.s.type.includes('html') ? value.filter.replace(/(<([^>]+)>)/ig, '') : value.filter
                    })
                        .addClass(that.classes.option)
                        .addClass(that.classes.notItalic);
        
                    if (added.indexOf(opt.val()) === -1) {
                        $(el).append(opt);
                        added.push(opt.val());
                        
                        if (preDefined !== null && opt.val() === preDefined[0]) {
                            opt.attr('selected', true);
                            that.dom.valueTitle.remove();
                        }
                    }
                }

                $(el).on('dtsb-inserted', function(){
                    for(let element of el) {
                        if($(el).hasClass('select2-hidden-accessible')) {
                            $(el).select2('destroy');
                        }

                        $(el).prepend('<option selected></option>');
                        $(el).select2({placeholder:'Value'});

                        if(preDefined !== null) {
                            $(el).val(preDefined[0]);
                            $(el).trigger('change');
                        }
                    }
                })

                return el;
            },
            search: function ( value, comparison) {
                return value === comparison[0];
            }
        }
    }

    var dt = $('#example').DataTable( {
        dom: 'Qfrtip',
        columnDefs: [{type: "special", targets: 2}]
    });

});

]]>
</js>

<title lib="searchBuilder">Plug in example</title>

<info><![CDATA[

This example shows how to use a plugin for a custom column type. The `$.fn.dataTable.ext.searchBuilder.conditions` object allows for custom conditions to be added to SearchBuilder. Details on the structure of the conditions to be added can be found at `-init searchBuilder.conditions[type]`.

Here the office column has been given a custom column type of `special`. We are also adding some conditions for a `special` type to SearchBuilder. To use the custom filter from the plugin select Office > Edinburgh and press the `Edinburgh` button that is displayed to toggle whether rows with `Edinburgh` are displayed.

For more information on creating your own plug-ins take a look at [this document](/extensions/searchbuilder.plugins)

]]></info>

</dt-example>
