<?xml version="1.0" encoding="UTF-8" ?>
<dt-api library="SearchBuilder">
	<name>searchBuilder.getDetails()</name>
	<summary>Get the details of the current search setup</summary>
	<since>1.0.0</since>

	<type type="function">
		<signature>searchBuilder.getDetails()</signature>
		<parameter type="boolean" name="deFormatDates" default="false">Boolean flag that indicates whether to de format any dates that are found into an ISO 8601 format.</parameter>
		<description>Gets the details of the current search.</description>
		<returns type="SearchBuilder.Criteria">Returns an object containing the details of the current search.</returns>
	</type>

	<description>
	<![CDATA[
		This method provides the ability to get the details of the data structure and search criteria that is being applied to the DataTable by SearchBuilder's filtering.

		Since version 1.2.0 `-api searchBuilder.getDetails()` takes one optional argument, `deFormatDates`. This is a boolean flag that when `true` deformats dates ISO 8601. The object that is returned represents all of the groups and criteria that are in place. The object can be passed into the `-api searchBuilder.rebuild()` function to make SearchBuilder reset to the point at which the object was created.

		The object structure is the same as would be used for preDefined searches - see `-type SearchBuilder.Criteria`.
	]]>

	</description>

	<example title="Get the details of a Search:"><![CDATA[
var dt = new DataTable('#myTable', {
	layout: {
		top1: 'searchBuilder'
	}
});

var d = dt.searchBuilder.getDetails();
]]></example>

	<example title="Get the details of a Search and de-format dates:"><![CDATA[
var dt = new DataTable('#myTable', {
	layout: {
		top1: 'searchBuilder'
	}
});

var d = dt.searchBuilder.getDetails(true);
]]></example>

<related type="api">searchBuilder.rebuild()</related>
<related type="init">searchBuilder.preDefined</related>

</dt-api>
