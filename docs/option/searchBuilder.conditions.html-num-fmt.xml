<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="SearchBuilder">
	<name>searchBuilder.conditions.html-num-fmt</name>
	<summary>An array of objects containing the conditions for the html-num-fmt type</summary>
	<since>SearchBuilder 0.0.1</since>

	<type type="Object[]">
		<description>
            An array of objects that hold the details of the conditions used for the html-num-fmt type.
        </description>
	</type>

	<default value="Object[]">
        The default value for the `-init searchBuilder.conditions.html-num-fmt` option is an array of Objects in the form of `-init searchBuilder.conditions[type]`.
	</default>
	<description>
		<![CDATA[
		This is useful as it allows extra html-num-fmt conditions to be defined that can add to the filtering options.
        ]]>
	</description>

	<example title="Simple extra html-num-fmt condition"><![CDATA[

    $('#example').DataTable( {
        dom: 'Qfrtip',
        searchBuilder: {
            conditions: {
                "html-num-fmt":[{
                    isInputValid(val, that) {
                        $(that.dom.valueTitle).attr('selected', false);
                        let allFilled = true;

                        for (let v of val) {
                            if ($(v).has('option:selected').length < 1) {
                                allFilled = false;
                            }
                        }

                        return allFilled;
                    }
                    conditionName: 'Made up',
                    inputValue(val, value = null) {
                        let values = [];

                        if (value === null) {
                            for (let v of val) {
                                if ($(v).is('select')) {
                                    values.push($(v).children('option:selected').val());
                                }
                            }
                        }
                        else {
                            for (let v = 0; v < val.length; v ++) {
                                if ($(val[v]).is('select')) {
                                    let children = $(v).children().toArray;
                                    for (let child of children) {
                                        if ($(child).val() === value[v]) {
                                            $(child).attr('selected', true);
                                            values.push(value[v]);
                                        }
                                    }
                                }
                            }
                        }

                        return values;
                    },
                    init(that, fn, preDefined) {
                        let column = $(that.dom.data).children('option:selected').val();
                        let indexArray = that.s.dt.rows().indexes().toArray();
                        let settings = that.s.dt.settings()[0];

                        let el = $('<select/>').append(that.dom.valueTitle);
                        el.on('change', function() {fn(that, el)});

                        that.s.values = [];

                        for (let index of indexArray) {
                            let filter = settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.search);

                            let value = {
                                filter,
                                index,
                                text: settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.conditionName)
                            };
                            that.s.values.push(value);
                            let opt = $('<option>', {
                                text : that.s.type.includes('html') ? value.text.replace(/(<([^>]+)>)/ig, '') : value.text,
                                value : that.s.type.includes('html') ? value.filter.replace(/(<([^>]+)>)/ig, '') : value.filter
                            })
                            .addClass(that.classes.option)
                            .addClass(that.classes.notItalic);
                            $(el).append(opt);
                            if (preDefined !== null && opt.val() === preDefined[0]) {
                                opt.attr('selected', true);
                                that.dom.valueTitle.remove();
                            }
                        }

                        return el;
                    },
                    search (value, comparison) {
                        value = value.replace(/[^0-9.]/g, '');
                        comparison[0] = comparison[0].replace(/[^0-9.]/g, '');

                        return +value === +comparison[0];
                    }
                }]
            }
        }
    });

]]></example>

<related type="init">searchBuilder.conditions[type]</related>

</dt-option>
