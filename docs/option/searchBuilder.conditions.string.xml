<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="SearchBuilder">
	<name>searchBuilder.conditions.string</name>
	<summary>An array of objects containing the conditions for the string type</summary>
	<since>SearchBuilder 0.0.1</since>

	<type type="Object[]">
		<description>
            An array of objects that hold the details of the conditions used for the string type.
        </description>
	</type>

	<default value="Object[]">
        The default value for the `-init searchBuilder.conditions.string` option is an array of Objects in the form of `-init searchBuilder.conditions[type]`.
	</default>
	<description>
		<![CDATA[
		This is useful as it allows extra string conditions to be defined that can add to the filtering options. The custom condition defined in the example will override the `=` condition in the `-type string` condition set.

		More details on the structure that is used can be found at `-init searchBuilder[type]`
		]]>
	</description>

	<example title="Simple extra string condition"><![CDATA[

    $('#example').DataTable( {
        dom: 'Qfrtip',
        searchBuilder: {
            conditions: {
                "string":{
                    '=': {
                        isInputValid: function (el, that) {
                            let allFilled = true;

                            for (let element of el) {
                                if ($(element).has('option:selected').length < 1) {
                                    allFilled = false;
                                }
                            }

                            return allFilled;
                        }
                        conditionName: 'Made up',
                        inputValue: function (el, value = null) {
                            let values = [];

                            if (value === null) {
                                for (let element of el) {
                                    if ($(element).is('select')) {
                                        values.push($(element).children('option:selected').val());
                                    }
                                }
                            }
                            else {
                                for (let v = 0; v < el.length; v ++) {
                                    if ($(el[v]).is('select')) {
                                        let children = $(el[v]).children().toArray;
                                        for (let child of children) {
                                            if ($(child).val() === value[v]) {
                                                $(child).attr('selected', true);
                                                values.push(value[v]);
                                            }
                                        }
                                    }
                                }
                            }

                            return values;
                        },
                        init: function (that, fn, preDefined) {
                            let column = $(that.dom.data).children('option:selected').val();
                            let indexArray = that.s.dt.rows().indexes().toArray();
                            let settings = that.s.dt.settings()[0];

                            let el = $('<select/>').append(that.dom.valueTitle);
                            el.on('change', function() {fn(that, el)});

                            that.s.values = [];

                            for (let index of indexArray) {
                                let filter = settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.search);

                                let value = {
                                    filter,
                                    index,
                                    text: settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.conditionName)
                                };
                                that.s.values.push(value);
                                let opt = $('<option>', {
                                    text : that.s.type.includes('html') ? value.text.replace(/(<([^>]+)>)/ig, '') : value.text,
                                    value : that.s.type.includes('html') ? value.filter.replace(/(<([^>]+)>)/ig, '') : value.filter
                                })
                                .addClass(that.classes.option)
                                .addClass(that.classes.notItalic);
                                $(el).append(opt);
                                if (preDefined !== null && opt.val() === preDefined[0]) {
                                    opt.attr('selected', true);
                                    that.dom.valueTitle.remove();
                                }
                            }

                            return el;
                        },
                        search: function (value, comparison) {
                            return value === comparison[0];
                        }
                    }
                }
            }
        }
    });

]]></example>

<related type="init">searchBuilder.conditions[type]</related>

</dt-option>
