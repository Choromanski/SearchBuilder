<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="SearchBuilder">
	<name>searchBuilder.conditions.html-num</name>
	<summary>An array of objects containing the conditions for the html-num type</summary>
	<since>SearchBuilder 0.0.1</since>

	<type type="Object[]">
		<description>
            An array of objects that hold the details of the conditions used for the html-num type.
        </description>
	</type>

	<default value="Object[]">
        The default value for the `-init searchBuilder.conditions.html-num` option is an array of Objects in the form of `-init searchBuilder.conditions[type]`.
	</default>
	<description>
		<![CDATA[
		This is useful as it allows extra html-num conditions to be defined that can add to the filtering options.
        ]]>
	</description>

	<example title="Simple extra html-num condition"><![CDATA[

    $('#example').DataTable( {
        dom: 'Qfrtip',
        searchBuilder: {
            conditions: {
                "html-num":[{
                    active(val, that) {
                        let allFilled = true;
                        for (let v of val) {
                            if ($(v).has('option:selected').length < 1 || ($(v).has('option:selected').length === 1 && $($(v).children('option:selected')[0]).text() === $(that.dom.value).text())) {
                                allFilled = false;
                            }
                        }

                        return allFilled;
                    },
                    display: 'Made Up',
                    get(val, that) {
                        let values = [];

                        for (let v of val) {
                            values.push($(v).children('option:selected').val());
                        }

                        return values;
                    },
                    init(that) {
                        let select = $('<select/>').addClass(Criteria.classes.value).addClass(Criteria.classes.dropDown);
                        $(select).append(that.dom.valueTitle);

                        return select;
                    },
                    set(val, that, preDefined = undefined) {
                        let column = $(that.dom.data).children('option:selected').val();
                        let indexArray = that.s.dt.rows().indexes().toArray();
                        let settings = that.s.dt.settings()[0];

                        for (let v of val) {
                            $(v).append(that.dom.valueTitle);
                        }

                        for (let index of indexArray) {
                            let filter = settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.search);
                            let found = false;

                            for (let value of that.s.values) {
                                if (value.filter === filter) {
                                    found = true;
                                    break;
                                }
                            }

                            if (!found) {
                                let value = {filter, text: settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.display), index};
                                that.s.values.push(value);
                                for (let v = 0; v < val.length; v++) {
                                    let opt = $('<option>', {
                                        text : that.s.type.includes('html') ? value.text.replace(/(<([^>]+)>)/ig, '') : value.text,
                                        value : that.s.type.includes('html') ? value.filter.replace(/(<([^>]+)>)/ig, '') : value.filter
                                    })
                                    .addClass(that.classes.option);
                                    $(val[v]).append(opt);
                                    if (preDefined !== undefined && opt.val() === preDefined[v]) {
                                        opt.attr('selected', true);
                                        that.dom.valueTitle.remove();
                                    }
                                }
                            }
                        }
                    },
                    updateOn: 'change',
                    comparator(value: any, comparison: any[]): boolean {
                        return +value === +comparison[0];
                    },
                }]
            }
        }
    });

]]></example>

<related type="init">searchBuilder.conditions[type]</related>

</dt-option>
