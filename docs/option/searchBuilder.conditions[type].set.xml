<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="SearchBuilder">
	<name>searchBuilder.conditions[type].set</name>
	<summary>Function that "populates" the value element</summary>
	<since>SearchBuilder 0.0.1</since>

	<type type="function">
		<signature>searchBuilder.conditions[type].set()</signature>
		<description>
            This function makes changes to the value element if they are required to populate it. This is mainly used for Select elements to add the options from the table.
        </description>
		<parameter type="JQuery<HTMLElement>[]">Array of the elements used to collect values</parameter>
        <parameter type="Criteria">Instance of the criteria that is being checked</parameter>
        <parameter type="object">Optional parameter with any predefined selections from either `-init statesave`, `-init searchBuilder.preDefined` or `-api searchBuilder.rebuild()`</parameter>
	</type>

	<description>
		<![CDATA[
		This function makes changes to the value element if they are required to populate it. This is mainly used for Select elements to add the options from the table, although it could be used to set default values. It takes 2 parameters.

            * `val` the array of value elements that belong to this criteria.
            * `that` the criteria instance that is being checked.

            The internals of the function are down to the functionality that you wish to create. Some examples are shown below for select and input elements
        ]]>
	</description>

<example title="Select set function"><![CDATA[
    ...
    set (val, that, preDefined = undefined) {
		let column = $(that.dom.data).children('option:selected').val();
		let indexArray = that.s.dt.rows().indexes().toArray();
		let settings = that.s.dt.settings()[0];

		for (let v of val) {
			$(v).append(that.dom.valueTitle);
		}

		for (let index of indexArray) {
			let filter = settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.search);
			let found = false;

			for (let value of that.s.values) {
				if (value.filter === filter) {
					found = true;
					break;
				}
			}

			if (!found) {
				let value = {filter, text: settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.display), index};
				that.s.values.push(value);
				for (let v = 0; v < val.length; v++) {
					let opt = $('<option>', {
						text : that.s.type.includes('html') ? value.text.replace(/(<([^>]+)>)/ig, '') : value.text,
						value : that.s.type.includes('html') ? value.filter.replace(/(<([^>]+)>)/ig, '') : value.filter
					})
					.addClass(that.classes.option);
					$(val[v]).append(opt);
					if (preDefined !== undefined && opt.val() === preDefined[v]) {
						opt.attr('selected', true);
						that.dom.valueTitle.remove();
					}
				}
			}
		}
    ...
]]></example>

<example title="Select set function"><![CDATA[
    ...
    set (val, that, preDefined = undefined) {
		for (let v = 0; v < val.length; v++) {
			if (preDefined !== undefined) {
				$(val[v]).val(preDefined[v]);
			}
		}

		return;
	}
    ...
]]></example>

<related type="init">searchBuilder.conditions[type]</related>
<related type="init">stateSave</related>
<related type="init">searchBuilder.preDefined</related>
<related type="api">searchBuilder.rebuild()</related>

</dt-option>
