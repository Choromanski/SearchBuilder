<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="SearchBuilder">
	<name>searchBuilder.conditions[type].inputValue</name>
	<summary>Function to get the values that are to be used in the comparisons</summary>
	<since>SearchBuilder 0.0.1</since>

	<type type="function">
		<signature>searchBuilder.conditions[type].inputValue</signature>
		<description>
            This function returns an array of values that are to be used to compare against the data in the table.
        </description>
		<parameter name="el" type="jQuery[]">The elements used to collect values</parameter>
        <parameter name="that" type="object"  default="undefined">This `-type object` is an instance of the Criteria that is being checked</parameter>
	</type>

	<description>
		<![CDATA[
This function is a getter. It returns an array of values that are to be used to compare against the data in the table. It takes 2 parameters.

* `el` the array of value elements that belong to this criteria.
* `that` Optional. The criteria instance that is being used.

The values that are returned here will be passed into the `-init searchBuilder.conditions[type].search` function. Typically these will be taken from the elements that the `-init searchBuilder.conditions[type].init` function created, although this may be different for some conditions such as `empty`. 

The `-init searchBuilder.conditions[type].inputValue` is in a seperate function rather than running it all in the `-init searchBuilder.conditions[type].search()`. This makes searching more efficient as the values only need to be collected from the jQuery elements once this way.

The manual page for [custom conditions](../extensions/searchbuilder/customConditions.html) covers in detail how this and the other values in this object come together to create a custom condition.

Some examples for select and input elements are shown below.
        ]]>
	</description>

<example title="Select inputValue function"><![CDATA[
...
inputValue (el) {
	// Extract the selected value from the select element
	return [$(el[0]).children('option:selected').val()];
}
...
]]></example>

<example title="Input inputValue function"><![CDATA[
...
inputValue (el) {
	// Extract the value in the input element
	return [$(el[0]).val()];
}
...
]]></example>

<related type="init">searchBuilder.conditions[type]</related>
<related type="init">searchBuilder.conditions[type].conditionName</related>
<related type="init">searchBuilder.conditions[type].init</related>
<related type="init">searchBuilder.conditions[type].isInputValid</related>
<related type="init">searchBuilder.conditions[type].search</related>

</dt-option>
