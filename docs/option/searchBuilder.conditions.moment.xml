<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="SearchBuilder">
	<name>searchBuilder.conditions.moment</name>
	<summary>An array of objects containing the conditions for columns that are using moment</summary>
	<since>SearchBuilder 0.0.1</since>

	<type type="Object[]">
		<description>
            An array of objects that hold the details of the conditions for columns that are using moment.
        </description>
	</type>

	<default value="Object[]">
        The default value for the `-init searchBuilder.conditions.moment` option is an array of Objects in the form of `-init searchBuilder.conditions[type]`.
	</default>
	<description>
		<![CDATA[
		This is useful as it allows extra moment date conditions to be defined that can add to the filtering options. The custom condition defined in the example will override the `=` condition in the `-type moment` condition set.

        More details on the structure that is used can be found at `-init searchBuilder[type]`
        ]]>
	</description>

	<example title="Simple extra date condition"><![CDATA[

    $('#example').DataTable( {
        dom: 'Qfrtip',
        searchBuilder: {
            conditions: {
                "moment":{
                    '=': {
                        isInputValid: function (el, that) {
                            let allFilled = true;
                            for (let element of el) {
                                if ($(element).is('input') && $(element).val().length === 0) {
                                    allFilled = false;
                                }
                            }

                            return allFilled;
                        }
                        conditionName: 'Made up',
                        inputValue: function (el, value = null) {
                            let values = [];

                            if (value === null) {
                                for (let element of el) {
                                    if ($(element).is('input')) {
                                        values.push(moment($(element).val()).format(that.s.momentFormat));
                                    }
                                }
                            }
                            else {
                                for (let v = 0; v < el.length; v++) {
                                    if ($(el[v]).is('input')) {
                                        $(el[v]).el(value[v]);
                                        values.push(value[v]);
                                    }
                                }
                            }

                            return values;
                        },
                        init: function (that, fn, preDefined) {
                            let el = $('<input/>').addClass(Criteria.classes.value).addClass(Criteria.classes.input).dtDateTime();

                            el.on('input', function() {fn(that, el)});

                            if (preDefined !== undefined) {
                                $(el).val(preDefined[0]);
                            }

                            return el;
                        },
                        search: function (value, comparison, that) {
                            return moment(value, that.s.momentFormat).valueOf() === moment(comparison[0], that.s.momentFormat).valueOf();
                        }
                    }
                }
            }
        }
    });

]]></example>

<related type="init">searchBuilder.conditions[type]</related>

</dt-option>
