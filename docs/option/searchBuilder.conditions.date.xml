<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="SearchBuilder">
	<name>searchBuilder.conditions.date</name>
	<summary>An array of objects containing the conditions for the date type</summary>
	<since>SearchBuilder 0.0.1</since>

	<type type="Object[]">
		<description>
            An array of objects that hold the details of the conditions used for the date type.
        </description>
	</type>

	<default value="Object[]">
        The default value for the `-init searchBuilder.conditions.date` option is an array of Objects in the form of `-init searchBuilder.conditions[type]`.
	</default>
	<description>
		<![CDATA[
		This is useful as it allows extra date conditions to be defined that can add to the filtering options.
        ]]>
	</description>

	<example title="Simple extra date condition"><![CDATA[

    $('#example').DataTable( {
        dom: 'Qfrtip',
        searchBuilder: {
            conditions: {
                "date":[{
                    active(val) {
                        let allFilled = true;
                        for (let v of val) {
                            if ($(v).val().length === 0) {
                                allFilled = false;
                            }
                        }

                        return allFilled;
                    },
                    display: 'Made Up',
                    get(val, that) {
                        let values = [];

                        for (let v of val) {
                            values.push($(v).val());
                        }

                        return values;
                    },
                    init(that) {
                        return $('<input/>').addClass(Criteria.classes.value).addClass(Criteria.classes.input);
                    },
                    set (val, that, preDefined) {
                        $(val).dtDateTime();
                        for (let v = 0; v < val.length; v++) {
                            if (preDefined !== undefined) {
                                $(val[v]).val(preDefined[v]);
                            }
                        }

                        return;
                    },
                    updateOn: 'change',
                    comparator(value: any, comparison: any[]): boolean {
                        return value === comparison[0];
                    },
                },]
            }
        }
    });

]]></example>

<related type="init">searchBuilder.conditions[type]</related>

</dt-option>
