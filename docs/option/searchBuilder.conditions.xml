<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="SearchBuilder">
	<name>searchBuilder.conditions</name>
	<summary>Define custom conditions for SearchBuilder</summary>
	<since>SearchBuilder 0.0.1</since>

	<type type="Object">
		<description>
            An object that contains conditions for each of the 7 DataTables types.
        </description>
	</type>

	<default value="Object">
        The default value for the `-init searchBuilder.conditions` option is an object with 7 properties, one for each of the DataTables types. Each property in turn contains an array of conditions.
	</default>
	<description>
		<![CDATA[
		This is useful as it allows custom conditions to be added to SearchBuilder should the standard ones not be enough.

        This object contains 7 properties.

        * `-init searchBuilder.conditions.string` This property holds an array of conditions that can be applied to the `-type string`
        * `-init searchBuilder.conditions.date` This property holds an array of conditions that can be applied to the `-type date`
        * `-init searchBuilder.conditions.num` This property holds an array of conditions that can be applied to the `-type num`
        * `-init searchBuilder.conditions.num-fmt` This property holds an array of conditions that can be applied to the `-type num-fmt`
        * `-init searchBuilder.conditions.html` This property holds an array of conditions that can be applied to the `-type html`
        * `-init searchBuilder.conditions.html-num` This property holds an array of conditions that can be applied to the `-type html-num`
        * `-init searchBuilder.conditions.html-num-fmt` This property holds an array of conditions that can be applied to the `-type html-num-fmt`
        ]]>
	</description>

	<example title="Simple extra num condition"><![CDATA[

    var dt = $('#example').DataTable( {
        dom: 'Qfrtip',
        searchBuilder: {
            conditions: {
                "num":[{
                    isInputValid(el, that) {
                        $(that.dom.valueTitle).attr('selected', false);
                        let allFilled = true;

                        for (let element of el) {
                            if ($(element).has('option:selected').length < 1) {
                                allFilled = false;
                            }
                        }

                        return allFilled;
                    }
                    conditionName: 'Made up',
                    inputValue(el, value = null) {
                        let values = [];

                        if (value === null) {
                            for (let element of el) {
                                if ($(element).is('select')) {
                                    values.push($(element).children('option:selected').val());
                                }
                            }
                        }
                        else {
                            for (let v = 0; v < el.length; v ++) {
                                if ($(ell[v]).is('select')) {
                                    let children = $(el[v]).children().toArray;
                                    for (let child of children) {
                                        if ($(child).val() === value[v]) {
                                            $(child).attr('selected', true);
                                            values.push(value[v]);
                                        }
                                    }
                                }
                            }
                        }

                        return values;
                    },
                    init(that, fn, preDefined) {
                        let column = $(that.dom.data).children('option:selected').val();
                        let indexArray = that.s.dt.rows().indexes().toArray();
                        let settings = that.s.dt.settings()[0];

                        let el = $('<select/>').append(that.dom.valueTitle);
                        el.on('change', function() {fn(that, el)});

                        that.s.values = [];

                        for (let index of indexArray) {
                            let filter = settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.search);

                            let value = {
                                filter,
                                index,
                                text: settings.oApi._fnGetCellData(settings, index, column, that.c.orthogonal.conditionName)
                            };
                            that.s.values.push(value);
                            let opt = $('<option>', {
                                text : that.s.type.includes('html') ? value.text.replace(/(<([^>]+)>)/ig, '') : value.text,
                                value : that.s.type.includes('html') ? value.filter.replace(/(<([^>]+)>)/ig, '') : value.filter
                            })
                            .addClass(that.classes.option)
                            .addClass(that.classes.notItalic);
                            $(el).append(opt);
                            if (preDefined !== null && opt.val() === preDefined[0]) {
                                opt.attr('selected', true);
                                that.dom.valueTitle.remove();
                            }
                        }

                        return el;
                    },
                    search (value, comparison) {
                        return +value === +comparison[0];
                    }
                }]
            }
        }
    });

]]></example>

<related type="init">searchBuilder.conditions[type]</related>
<related type="init">searchBuilder.conditions.date</related>
<related type="init">searchBuilder.conditions.num</related>
<related type="init">searchBuilder.conditions.num-fmt</related>
<related type="init">searchBuilder.conditions.string</related>
<related type="init">searchBuilder.conditions.html</related>
<related type="init">searchBuilder.conditions.html-num</related>
<related type="init">searchBuilder.conditions.html-num-fmt</related>

</dt-option>
